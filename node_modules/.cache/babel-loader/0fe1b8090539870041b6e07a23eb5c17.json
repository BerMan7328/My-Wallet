{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Estudos\\\\Typescript\\\\My-Wallet\\\\src\\\\pages\\\\Dashboard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport { Container } from './styles';\nimport ContentHeader from '../../components/ContentHeader';\nimport SelectInput from '../../components/SelectInput';\nimport expenses from '../../repositories/expenses';\nimport gains from '../../repositories/gains';\nimport listOfMonths from '../../utils/months';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const options = [{\n    value: 'Bernardo',\n    label: 'Bernardo'\n  }, {\n    value: 'Ana',\n    label: 'Ana'\n  }, {\n    value: 'Julie',\n    label: 'Julie'\n  }];\n  const years = useMemo(() => {\n    let uniqueYears = [];\n    [...expenses, ...gains].forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n\n      if (!uniqueYears.includes(year)) {\n        uniqueYears.push(year);\n      }\n    });\n    return uniqueYears.map(year => {\n      return {\n        value: year,\n        label: year\n      };\n    });\n  }, []);\n  const months = useMemo(() => {\n    return listOfMonths.map((month, index) => {\n      return {\n        value: index + 1,\n        label: month\n      };\n    });\n  }, []);\n  const [monthSelected, setMonthSelected] = useState(new Date().getMonth() + 1);\n  const [yearSelected, setYearSelected] = useState(new Date().getFullYear());\n\n  const handleMonthSelected = month => {\n    try {\n      const parseMonth = Number(month);\n      setMonthSelected(parseMonth);\n    } catch {\n      throw new Error('invalid month value. Is accept 0 - 24.');\n    }\n  };\n\n  const handleYearSelected = year => {\n    try {\n      const parseYear = Number(year);\n      setYearSelected(parseYear);\n    } catch {\n      throw new Error('invalid year value. Is accept integer numbers.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(ContentHeader, {\n      title: \"Dashboard\",\n      lineColor: \"#F7931B\",\n      children: [/*#__PURE__*/_jsxDEV(SelectInput, {\n        options: months,\n        onChange: e => handleMonthSelected(e.target.value),\n        defaultValue: monthSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n        options: years,\n        onChange: e => handleYearSelected(e.target.value),\n        defaultValue: yearSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"wyptE23OlC08rtCetlmW+YHA2Xk=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/Projects/Estudos/Typescript/My-Wallet/src/pages/Dashboard/index.tsx"],"names":["React","useState","useMemo","Container","ContentHeader","SelectInput","expenses","gains","listOfMonths","Dashboard","options","value","label","years","uniqueYears","forEach","item","date","Date","year","getFullYear","includes","push","map","months","month","index","monthSelected","setMonthSelected","getMonth","yearSelected","setYearSelected","handleMonthSelected","parseMonth","Number","Error","handleYearSelected","parseYear","e","target"],"mappings":"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","sourcesContent":["import React, {useState, useMemo} from 'react';\r\nimport  { Container } from './styles';\r\nimport ContentHeader from '../../components/ContentHeader';\r\nimport SelectInput from '../../components/SelectInput';\r\nimport expenses from '../../repositories/expenses';\r\nimport gains from '../../repositories/gains';\r\nimport listOfMonths from '../../utils/months';\r\n\r\nconst Dashboard: React.FC = () => {\r\n\r\n    const options = [\r\n        {value: 'Bernardo', label: 'Bernardo'},\r\n        {value: 'Ana', label: 'Ana'},\r\n        {value: 'Julie', label: 'Julie'},\r\n    ]\r\n    const years = useMemo(() => {\r\n        let uniqueYears: number[] = [];\r\n        \r\n        [...expenses, ...gains].forEach(item => {\r\n             const date = new Date(item.date);\r\n             const year = date.getFullYear();\r\n             if(!uniqueYears.includes(year)){\r\n                 uniqueYears.push(year)\r\n             }\r\n         });\r\n         return uniqueYears.map(year => {\r\n             return {\r\n                 value: year,\r\n                 label: year,\r\n             }\r\n         });\r\n     },[]);\r\n\r\n     const months = useMemo(() => {\r\n        return listOfMonths.map((month, index) => {\r\n            return {\r\n                value: index + 1,\r\n                label: month,\r\n            }\r\n        });\r\n        },[]);\r\n\r\n    const [monthSelected, setMonthSelected] = useState<number>(new Date().getMonth() + 1);\r\n    const [yearSelected, setYearSelected] = useState<number>(new Date().getFullYear());\r\n\r\n    const handleMonthSelected = (month: string) => {\r\n\r\n        try {\r\n            const parseMonth = Number(month);\r\n            setMonthSelected(parseMonth);\r\n        }\r\n        catch{\r\n            throw new Error('invalid month value. Is accept 0 - 24.')\r\n        }\r\n    }\r\n\r\n    const handleYearSelected = (year: string) => {\r\n        try {\r\n            const parseYear = Number(year);\r\n            setYearSelected(parseYear);\r\n        }\r\n        catch{\r\n            throw new Error('invalid year value. Is accept integer numbers.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ContentHeader title=\"Dashboard\" lineColor=\"#F7931B\">\r\n                <SelectInput  options={months} onChange={(e) => handleMonthSelected(e.target.value)} defaultValue={monthSelected}/>\r\n                <SelectInput  options={years} onChange={(e) => handleYearSelected(e.target.value)}defaultValue={yearSelected}/>\r\n            </ ContentHeader>\r\n        </ Container>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}