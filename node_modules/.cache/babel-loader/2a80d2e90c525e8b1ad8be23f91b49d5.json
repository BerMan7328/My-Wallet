{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Estudos\\\\Typescript\\\\minha-carteira-dashboard\\\\src\\\\pages\\\\Dashboard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport ContentHeader from '../../components/ContentHeader';\nimport SelectInput from '../../components/SelectInput';\nimport WalletBox from '../../components/WalletBox';\nimport MessageBox from '../../components/MessageBox';\nimport PieChartBox from '../../components/PieChartBox';\nimport HistoryBox from '../../components/HistoryBox';\nimport BarChartBox from '../../components/BarChartBox';\nimport expenses from '../../repositories/expenses';\nimport gains from '../../repositories/gains';\nimport listOfMonths from '../../utils/months';\nimport happyImg from \"../../assets/happy.svg\";\nimport sadImg from \"../../assets/sad.svg\";\nimport grinningImg from \"../../assets/grinning.svg\";\nimport opsImg from \"../../assets/ops.svg\";\nimport { Container, Content } from './styles';\n\nconst Dashboard = () => {\n  _s();\n\n  const [monthSelected, setMonthSelected] = useState(new Date().getMonth() + 1);\n  const [yearSelected, setYearSelected] = useState(new Date().getFullYear());\n  const years = useMemo(() => {\n    let uniqueYears = [];\n    [...expenses, ...gains].forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n\n      if (!uniqueYears.includes(year)) {\n        uniqueYears.push(year);\n      }\n    });\n    return uniqueYears.map(year => {\n      return {\n        value: year,\n        label: year\n      };\n    });\n  }, []);\n  const months = useMemo(() => {\n    return listOfMonths.map((month, index) => {\n      return {\n        value: index + 1,\n        label: month\n      };\n    });\n  }, []);\n  const totalExpenses = useMemo(() => {\n    let total = 0;\n    expenses.forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n\n      if (month === monthSelected && year === yearSelected) {\n        try {\n          total += Number(item.amount);\n        } catch {\n          throw new Error('Invalid amount! Amount must be number.');\n        }\n      }\n    });\n    return total;\n  }, [monthSelected, yearSelected]);\n  const totalGains = useMemo(() => {\n    let total = 0;\n    gains.forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n\n      if (month === monthSelected && year === yearSelected) {\n        try {\n          total += Number(item.amount);\n        } catch {\n          throw new Error('Invalid amount! Amount must be number.');\n        }\n      }\n    });\n    return total;\n  }, [monthSelected, yearSelected]);\n  const totalBalance = useMemo(() => {\n    return totalGains - totalExpenses;\n  }, [totalGains, totalExpenses]);\n  const message = useMemo(() => {\n    if (totalBalance < 0) {\n      return {\n        title: \"Que triste!\",\n        description: \"Neste mês, você gastou mais do que deveria.\",\n        footerText: \"Verifique seus gastos e tente cortar algumas coisas desnecessárias.\",\n        icon: sadImg\n      };\n    } else if (totalGains === 0 && totalExpenses === 0) {\n      return {\n        title: \"Op's!\",\n        description: \"Neste mês, não há registros de entradas ou saídas.\",\n        footerText: \"Parece que você não fez nenhum registro no mês e ano selecionado.\",\n        icon: opsImg\n      };\n    } else if (totalBalance === 0) {\n      return {\n        title: \"Ufaa!\",\n        description: \"Neste mês, você gastou exatamente o que ganhou.\",\n        footerText: \"Tenha cuidado. No próximo tente poupar o seu dinheiro.\",\n        icon: grinningImg\n      };\n    } else {\n      return {\n        title: \"Muito bem!\",\n        description: \"Sua carteira está positiva!\",\n        footerText: \"Continue assim. Considere investir o seu saldo.\",\n        icon: happyImg\n      };\n    }\n  }, [totalBalance, totalGains, totalExpenses]);\n  const relationExpensesVersusGains = useMemo(() => {\n    const total = totalGains + totalExpenses;\n    const percentGains = Number((totalGains / total * 100).toFixed(1));\n    const percentExpenses = Number((totalExpenses / total * 100).toFixed(1));\n    const data = [{\n      name: \"Entradas\",\n      value: totalGains,\n      percent: percentGains ? percentGains : 0,\n      color: '#E44C4E'\n    }, {\n      name: \"Saídas\",\n      value: totalExpenses,\n      percent: percentExpenses ? percentExpenses : 0,\n      color: '#F7931B'\n    }];\n    return data;\n  }, [totalGains, totalExpenses]);\n  const historyData = useMemo(() => {\n    return listOfMonths.map((_, month) => {\n      let amountEntry = 0;\n      gains.forEach(gain => {\n        const date = new Date(gain.date);\n        const gainMonth = date.getMonth();\n        const gainYear = date.getFullYear();\n\n        if (gainMonth === month && gainYear === yearSelected) {\n          try {\n            amountEntry += Number(gain.amount);\n          } catch {\n            throw new Error('amountEntry is invalid. amountEntry must be valid number.');\n          }\n        }\n      });\n      let amountOutput = 0;\n      expenses.forEach(expense => {\n        const date = new Date(expense.date);\n        const expenseMonth = date.getMonth();\n        const expenseYear = date.getFullYear();\n\n        if (expenseMonth === month && expenseYear === yearSelected) {\n          try {\n            amountOutput += Number(expense.amount);\n          } catch {\n            throw new Error('amountOutput is invalid. amountOutput must be valid number.');\n          }\n        }\n      });\n      return {\n        monthNumber: month,\n        month: listOfMonths[month].substr(0, 3),\n        amountEntry,\n        amountOutput\n      };\n    }).filter(item => {\n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      return yearSelected === currentYear && item.monthNumber <= currentMonth || yearSelected < currentYear;\n    });\n  }, [yearSelected]);\n  const relationExpensevesRecurrentVersusEventual = useMemo(() => {\n    let amountRecurrent = 0;\n    let amountEventual = 0;\n    expenses.filter(expense => {\n      const date = new Date(expense.date);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      return month === monthSelected && year === yearSelected;\n    }).forEach(expense => {\n      if (expense.frequency === 'recorrente') {\n        return amountRecurrent += Number(expense.amount);\n      }\n\n      if (expense.frequency === 'eventual') {\n        return amountEventual += Number(expense.amount);\n      }\n    });\n    const total = amountRecurrent + amountEventual;\n    const percentRecurrent = Number((amountRecurrent / total * 100).toFixed(1));\n    const percentEventual = Number((amountEventual / total * 100).toFixed(1));\n    return [{\n      name: 'Recorrentes',\n      amount: amountRecurrent,\n      percent: percentRecurrent ? percentRecurrent : 0,\n      color: \"#F7931B\"\n    }, {\n      name: 'Eventuais',\n      amount: amountEventual,\n      percent: percentEventual ? percentEventual : 0,\n      color: \"#E44C4E\"\n    }];\n  }, [monthSelected, yearSelected]);\n  const relationGainsRecurrentVersusEventual = useMemo(() => {\n    let amountRecurrent = 0;\n    let amountEventual = 0;\n    gains.filter(gain => {\n      const date = new Date(gain.date);\n      const year = date.getFullYear();\n      const month = date.getMonth() + 1;\n      return month === monthSelected && year === yearSelected;\n    }).forEach(gain => {\n      if (gain.frequency === 'recorrente') {\n        return amountRecurrent += Number(gain.amount);\n      }\n\n      if (gain.frequency === 'eventual') {\n        return amountEventual += Number(gain.amount);\n      }\n    });\n    const total = amountRecurrent + amountEventual;\n    const percentRecurrent = Number((amountRecurrent / total * 100).toFixed(1));\n    const percentEventual = Number((amountEventual / total * 100).toFixed(1));\n    return [{\n      name: 'Recorrentes',\n      amount: amountRecurrent,\n      percent: percentRecurrent ? percentRecurrent : 0,\n      color: \"#F7931B\"\n    }, {\n      name: 'Eventuais',\n      amount: amountEventual,\n      percent: percentEventual ? percentEventual : 0,\n      color: \"#E44C4E\"\n    }];\n  }, [monthSelected, yearSelected]);\n  const handleMonthSelected = useCallback(month => {\n    try {\n      const parseMonth = Number(month);\n      setMonthSelected(parseMonth);\n    } catch {\n      throw new Error('invalid month value. Is accept 0 - 24.');\n    }\n  }, []);\n  const handleYearSelected = useCallback(year => {\n    try {\n      const parseYear = Number(year);\n      setYearSelected(parseYear);\n    } catch {\n      throw new Error('invalid year value. Is accept integer numbers.');\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ContentHeader, {\n    title: \"Dashboard\",\n    lineColor: \"#F7931B\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectInput, {\n    options: months,\n    onChange: e => handleMonthSelected(e.target.value),\n    defaultValue: monthSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SelectInput, {\n    options: years,\n    onChange: e => handleYearSelected(e.target.value),\n    defaultValue: yearSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"saldo\",\n    color: \"#4E41F0\",\n    amount: totalBalance,\n    footerlabel: \"atualizado com base nas entradas e sa\\xEDdas\",\n    icon: \"dolar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"entradas\",\n    color: \"#F7931B\",\n    amount: totalGains,\n    footerlabel: \"atualizado com base nas entradas e sa\\xEDdas\",\n    icon: \"arrowUp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(WalletBox, {\n    title: \"sa\\xEDdas\",\n    color: \"#E44C4E\",\n    amount: totalExpenses,\n    footerlabel: \"atualizado com base nas entradas e sa\\xEDdas\",\n    icon: \"arrowDown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MessageBox, {\n    title: message.title,\n    description: message.description,\n    footerText: message.footerText,\n    icon: message.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PieChartBox, {\n    data: relationExpensesVersusGains,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HistoryBox, {\n    data: historyData,\n    lineColorAmountEntry: \"#F7931B\",\n    lineColorAmountOutput: \"#E44C4E\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(BarChartBox, {\n    title: \"Sa\\xEDdas\",\n    data: relationExpensevesRecurrentVersusEventual,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(BarChartBox, {\n    title: \"Entradas\",\n    data: relationGainsRecurrentVersusEventual,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 17\n    }\n  })));\n};\n\n_s(Dashboard, \"gXtgv/nEbG3kwWrwRTBSQYMoHEY=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/Projects/Estudos/Typescript/minha-carteira-dashboard/src/pages/Dashboard/index.tsx"],"names":["React","useState","useMemo","useCallback","ContentHeader","SelectInput","WalletBox","MessageBox","PieChartBox","HistoryBox","BarChartBox","expenses","gains","listOfMonths","Container","Content","Dashboard","monthSelected","setMonthSelected","Date","getMonth","yearSelected","setYearSelected","getFullYear","years","uniqueYears","forEach","item","date","year","includes","push","map","value","label","months","month","index","totalExpenses","total","Number","amount","Error","totalGains","totalBalance","message","title","description","footerText","icon","sadImg","opsImg","grinningImg","happyImg","relationExpensesVersusGains","percentGains","toFixed","percentExpenses","data","name","percent","color","historyData","_","amountEntry","gain","gainMonth","gainYear","amountOutput","expense","expenseMonth","expenseYear","monthNumber","substr","filter","currentMonth","currentYear","relationExpensevesRecurrentVersusEventual","amountRecurrent","amountEventual","frequency","percentRecurrent","percentEventual","relationGainsRecurrentVersusEventual","handleMonthSelected","parseMonth","handleYearSelected","parseYear","e","target"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\r\n\r\n\r\nimport ContentHeader from '../../components/ContentHeader';\r\nimport SelectInput from '../../components/SelectInput';\r\nimport WalletBox from '../../components/WalletBox';\r\nimport MessageBox from '../../components/MessageBox';\r\nimport PieChartBox from '../../components/PieChartBox';\r\nimport HistoryBox from '../../components/HistoryBox';\r\nimport BarChartBox from '../../components/BarChartBox'\r\n\r\nimport expenses from '../../repositories/expenses';\r\nimport gains from '../../repositories/gains';\r\nimport listOfMonths from '../../utils/months';\r\n\r\nimport happyImg from '../../assets/happy.svg';\r\nimport sadImg from '../../assets/sad.svg';\r\nimport grinningImg from '../../assets/grinning.svg';\r\nimport opsImg from '../../assets/ops.svg';\r\n\r\n\r\nimport { \r\n    Container,\r\n    Content, \r\n} from './styles';\r\n\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [monthSelected, setMonthSelected] = useState<number>(new Date().getMonth() + 1);\r\n    const [yearSelected, setYearSelected] = useState<number>(new Date().getFullYear());\r\n\r\n\r\n    const years = useMemo(() => {\r\n        let uniqueYears: number[] = [];\r\n\r\n        [...expenses, ...gains].forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n\r\n            if(!uniqueYears.includes(year)){\r\n                uniqueYears.push(year)\r\n           }\r\n        });\r\n\r\n        return uniqueYears.map(year => {\r\n            return {\r\n                value: year,\r\n                label: year,\r\n            }\r\n        });\r\n    },[]);\r\n\r\n\r\n    const months = useMemo(() => {\r\n        return listOfMonths.map((month, index) => {\r\n            return {\r\n                value: index + 1,\r\n                label: month,\r\n            }\r\n        });\r\n    },[]);\r\n    \r\n    \r\n    const totalExpenses = useMemo(() => {\r\n        let total: number = 0;\r\n\r\n        expenses.forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            if(month === monthSelected && year === yearSelected){\r\n                try{\r\n                    total += Number(item.amount)\r\n                }catch{\r\n                    throw new Error('Invalid amount! Amount must be number.')\r\n                }\r\n            }\r\n        });\r\n\r\n        return total;\r\n    },[monthSelected, yearSelected]);\r\n\r\n\r\n    const totalGains = useMemo(() => {\r\n        let total: number = 0;\r\n\r\n        gains.forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            if(month === monthSelected && year === yearSelected){\r\n                try{\r\n                    total += Number(item.amount)\r\n                }catch{\r\n                    throw new Error('Invalid amount! Amount must be number.')\r\n                }\r\n            }\r\n        });\r\n\r\n        return total;\r\n    },[monthSelected, yearSelected]);\r\n\r\n    const totalBalance = useMemo(() => {\r\n        return totalGains - totalExpenses;\r\n    },[totalGains, totalExpenses]);\r\n\r\n    const message = useMemo(() => {\r\n        if(totalBalance < 0){\r\n            return {\r\n                title: \"Que triste!\",\r\n                description: \"Neste mês, você gastou mais do que deveria.\",\r\n                footerText: \"Verifique seus gastos e tente cortar algumas coisas desnecessárias.\",\r\n                icon: sadImg\r\n            }\r\n        }      \r\n        else if(totalGains === 0 && totalExpenses === 0){\r\n            return {\r\n                title: \"Op's!\",\r\n                description: \"Neste mês, não há registros de entradas ou saídas.\",\r\n                footerText: \"Parece que você não fez nenhum registro no mês e ano selecionado.\",\r\n                icon: opsImg\r\n            }\r\n        }\r\n        else if(totalBalance === 0){\r\n            return {\r\n                title: \"Ufaa!\",\r\n                description: \"Neste mês, você gastou exatamente o que ganhou.\",\r\n                footerText: \"Tenha cuidado. No próximo tente poupar o seu dinheiro.\",\r\n                icon: grinningImg\r\n            }\r\n        }\r\n        else{\r\n            return {\r\n                title: \"Muito bem!\",\r\n                description: \"Sua carteira está positiva!\",\r\n                footerText: \"Continue assim. Considere investir o seu saldo.\",\r\n                icon: happyImg\r\n            }\r\n        }\r\n\r\n    },[totalBalance, totalGains, totalExpenses]);\r\n\r\n    const relationExpensesVersusGains = useMemo(() => {\r\n        const total = totalGains + totalExpenses;\r\n\r\n        const percentGains = Number(((totalGains / total) * 100).toFixed(1));\r\n        const percentExpenses = Number(((totalExpenses / total) * 100).toFixed(1));\r\n\r\n        const data = [\r\n            {\r\n                name: \"Entradas\",\r\n                value: totalGains,\r\n                percent: percentGains ? percentGains : 0, \r\n                color: '#E44C4E'\r\n            },\r\n            {\r\n                name: \"Saídas\",\r\n                value: totalExpenses,\r\n                percent: percentExpenses ? percentExpenses : 0, \r\n                color: '#F7931B'\r\n            },\r\n        ];\r\n\r\n        return data;\r\n    },[totalGains, totalExpenses]);\r\n\r\n    const historyData = useMemo(() => {\r\n        return listOfMonths\r\n        .map((_, month) => {\r\n            \r\n            let amountEntry = 0;\r\n            gains.forEach(gain => {\r\n                const date = new Date(gain.date);\r\n                const gainMonth = date.getMonth();\r\n                const gainYear = date.getFullYear();\r\n\r\n                if(gainMonth === month && gainYear === yearSelected){\r\n                    try{\r\n                        amountEntry += Number(gain.amount);\r\n                    }catch{\r\n                        throw new Error('amountEntry is invalid. amountEntry must be valid number.')\r\n                    }\r\n                }\r\n            });\r\n\r\n            let amountOutput = 0;\r\n            expenses.forEach(expense => {\r\n                const date = new Date(expense.date);\r\n                const expenseMonth = date.getMonth();\r\n                const expenseYear = date.getFullYear();\r\n\r\n                if(expenseMonth === month && expenseYear === yearSelected){\r\n                    try{\r\n                        amountOutput += Number(expense.amount);\r\n                    }catch{\r\n                        throw new Error('amountOutput is invalid. amountOutput must be valid number.')\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            return {\r\n                monthNumber: month,\r\n                month: listOfMonths[month].substr(0, 3),\r\n                amountEntry,\r\n                amountOutput\r\n            }\r\n        })\r\n        .filter(item => {\r\n            const currentMonth = new Date().getMonth();\r\n            const currentYear = new Date().getFullYear();\r\n            return (yearSelected === currentYear && item.monthNumber <= currentMonth) || (yearSelected < currentYear)\r\n        });\r\n    },[yearSelected]);\r\n\r\n    const relationExpensevesRecurrentVersusEventual = useMemo(() => {\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        expenses\r\n        .filter((expense) => {\r\n            const date = new Date(expense.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return month === monthSelected && year === yearSelected;\r\n        })\r\n        .forEach((expense) => {\r\n            if(expense.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(expense.amount);\r\n            }\r\n\r\n            if(expense.frequency === 'eventual'){\r\n                return amountEventual += Number(expense.amount);\r\n            }\r\n        });\r\n\r\n        const total = amountRecurrent + amountEventual;\r\n\r\n        const percentRecurrent = Number(((amountRecurrent / total) * 100).toFixed(1));\r\n        const percentEventual = Number(((amountEventual / total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: 'Recorrentes',\r\n                amount: amountRecurrent,\r\n                percent: percentRecurrent ? percentRecurrent : 0, \r\n                color: \"#F7931B\"\r\n            },\r\n            {\r\n                name: 'Eventuais',\r\n                amount: amountEventual,\r\n                percent: percentEventual ? percentEventual : 0,\r\n                color: \"#E44C4E\"\r\n            }\r\n        ];\r\n    },[monthSelected, yearSelected]);\r\n\r\n\r\n    const relationGainsRecurrentVersusEventual = useMemo(() => {\r\n        let amountRecurrent = 0;\r\n        let amountEventual = 0;\r\n\r\n        gains\r\n        .filter((gain) => {\r\n            const date = new Date(gain.date);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth() + 1;\r\n\r\n            return month === monthSelected && year === yearSelected;\r\n        })\r\n        .forEach((gain) => {\r\n            if(gain.frequency === 'recorrente'){\r\n                return amountRecurrent += Number(gain.amount);\r\n            }\r\n\r\n            if(gain.frequency === 'eventual'){\r\n                return amountEventual += Number(gain.amount);\r\n            }\r\n        });\r\n\r\n        const total = amountRecurrent + amountEventual;\r\n\r\n        const percentRecurrent = Number(((amountRecurrent / total) * 100).toFixed(1));\r\n        const percentEventual = Number(((amountEventual / total) * 100).toFixed(1));\r\n\r\n        return [\r\n            {\r\n                name: 'Recorrentes',\r\n                amount: amountRecurrent,\r\n                percent: percentRecurrent ? percentRecurrent : 0,\r\n                color: \"#F7931B\"\r\n            },\r\n            {\r\n                name: 'Eventuais',\r\n                amount: amountEventual,\r\n                percent: percentEventual ? percentEventual : 0,\r\n                color: \"#E44C4E\"\r\n            }\r\n        ];\r\n    },[monthSelected, yearSelected]);\r\n\r\n    const handleMonthSelected = useCallback((month: string) => {\r\n        try {\r\n            const parseMonth = Number(month);\r\n            setMonthSelected(parseMonth);\r\n        }\r\n        catch{\r\n            throw new Error('invalid month value. Is accept 0 - 24.')\r\n        }\r\n    },[]);\r\n\r\n\r\n    const handleYearSelected = useCallback((year: string) => {\r\n        try {\r\n            const parseYear = Number(year);\r\n            setYearSelected(parseYear);\r\n        }\r\n        catch{\r\n            throw new Error('invalid year value. Is accept integer numbers.')\r\n        }\r\n    },[]);\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <ContentHeader title=\"Dashboard\" lineColor=\"#F7931B\">\r\n                <SelectInput \r\n                    options={months}\r\n                    onChange={(e) => handleMonthSelected(e.target.value)} \r\n                    defaultValue={monthSelected}\r\n                />\r\n                <SelectInput \r\n                    options={years} \r\n                    onChange={(e) => handleYearSelected(e.target.value)} \r\n                    defaultValue={yearSelected}\r\n                />\r\n            </ContentHeader>\r\n\r\n            <Content>\r\n                <WalletBox \r\n                    title=\"saldo\"\r\n                    color=\"#4E41F0\"\r\n                    amount={totalBalance}\r\n                    footerlabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"dolar\"\r\n                />\r\n\r\n                <WalletBox \r\n                    title=\"entradas\"\r\n                    color=\"#F7931B\"\r\n                    amount={totalGains}\r\n                    footerlabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"arrowUp\"\r\n                />\r\n\r\n                <WalletBox \r\n                    title=\"saídas\"\r\n                    color=\"#E44C4E\"\r\n                    amount={totalExpenses}\r\n                    footerlabel=\"atualizado com base nas entradas e saídas\"\r\n                    icon=\"arrowDown\"\r\n                />\r\n\r\n                <MessageBox\r\n                    title={message.title}\r\n                    description={message.description}\r\n                    footerText={message.footerText}\r\n                    icon={message.icon}\r\n                />\r\n\r\n                <PieChartBox data={relationExpensesVersusGains} />\r\n\r\n                <HistoryBox \r\n                    data={historyData} \r\n                    lineColorAmountEntry=\"#F7931B\"\r\n                    lineColorAmountOutput=\"#E44C4E\"\r\n                />\r\n\r\n                <BarChartBox \r\n                    title=\"Saídas\"\r\n                    data={relationExpensevesRecurrentVersusEventual} \r\n                />\r\n                \r\n                <BarChartBox \r\n                    title=\"Entradas\"\r\n                    data={relationGainsRecurrentVersusEventual} \r\n                />\r\n                \r\n            </Content>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}