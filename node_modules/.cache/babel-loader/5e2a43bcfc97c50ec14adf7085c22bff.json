{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Estudos\\\\Typescript\\\\My-Wallet\\\\src\\\\pages\\\\List\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { uuid } from 'uuidv4';\nimport { Container, Content, Filters } from './styles';\nimport ContentHeader from '../../components/ContentHeader';\nimport SelectInput from '../../components/SelectInput';\nimport HistoryFinnanceCard from '../../components/HistoryFinnanceCard';\nimport gains from '../../repositories/gains';\nimport expenses from '../../repositories/expenses';\nimport formatCurrency from '../../utils/formatCurrency';\nimport formatDate from '../../utils/formatDate';\nimport listOfMonths from '../../utils/months';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = ({\n  match\n}) => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [monthSelected, setMonthSelected] = useState(new Date().getMonth() + 1);\n  const [yearSelected, setYearSelected] = useState(new Date().getFullYear());\n  const [frequencyFilterSelected, setFrequencyFilterSelected] = useState(['recorrente', 'eventual']);\n  const movimentType = match.params.type;\n  const pageData = useMemo(() => {\n    return movimentType === 'entry-balance' ? {\n      title: 'Entradas',\n      lineColor: '#F7931B',\n      data: gains\n    } : {\n      title: 'SaÃ­das',\n      lineColor: '#E44C4E',\n      data: expenses\n    };\n  }, [movimentType]);\n  const years = useMemo(() => {\n    let uniqueYears = [];\n    const {\n      data\n    } = pageData;\n    data.forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n\n      if (!uniqueYears.includes(year)) {\n        uniqueYears.push(year);\n      }\n    });\n    return uniqueYears.map(year => {\n      return {\n        value: year,\n        label: year\n      };\n    });\n  }, [pageData]);\n  const months = useMemo(() => {\n    return listOfMonths.map((month, index) => {\n      return {\n        value: index + 1,\n        label: month\n      };\n    });\n  }, []);\n\n  const handleFrequencyClick = frequency => {\n    const alreadySelected = frequencyFilterSelected.findIndex(item => item === frequency);\n\n    if (alreadySelected >= 0) {\n      const filtered = frequencyFilterSelected.filter(item => item != frequency);\n      setFrequencyFilterSelected(filtered);\n    } else {\n      setFrequencyFilterSelected(prev => [...prev, frequency]);\n    }\n  };\n\n  const handleMonthSelected = month => {\n    try {\n      const parseMonth = Number(month);\n      setMonthSelected(parseMonth);\n    } catch {\n      throw new Error('invalid month value. Is accept 0 - 24.');\n    }\n  };\n\n  const handleYearSelected = year => {\n    try {\n      const parseYear = Number(year);\n      setYearSelected(parseYear);\n    } catch {\n      throw new Error('invalid year value. Is accept integer numbers.');\n    }\n  };\n\n  useEffect(() => {\n    const {\n      data\n    } = pageData;\n    const filteredDate = data.filter(item => {\n      const date = new Date(item.date);\n      const month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      return month === monthSelected && year === yearSelected && frequencyFilterSelected.includes(item.frequency);\n    });\n    const formattedData = filteredDate.map(item => {\n      return {\n        id: uuid(),\n        description: item.description,\n        amountFormatted: formatCurrency(Number(item.amount)),\n        frequency: item.frequency,\n        dateFormatted: formatDate(item.date),\n        tagColor: item.frequency === 'recorrente' ? '#4E41F0' : '#E44C4E'\n      };\n    });\n    setData(formattedData);\n  }, [pageData, monthSelected, yearSelected, data.length, frequencyFilterSelected]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ContentHeader, {\n      title: pageData.title,\n      lineColor: pageData.lineColor,\n      children: [/*#__PURE__*/_jsxDEV(SelectInput, {\n        options: months,\n        onChange: e => handleMonthSelected(e.target.value),\n        defaultValue: monthSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n        options: years,\n        onChange: e => handleYearSelected(e.target.value),\n        defaultValue: yearSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `tag-filter tag-filter-recurrent\n                        ${frequencyFilterSelected.includes('recorrente') && 'tag-actived'}`,\n        onClick: () => handleFrequencyClick('recorrente'),\n        children: \"Recorrentes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `tag-filter tag-filter-eventual\n                    ${frequencyFilterSelected.includes('eventual') && 'tag-actived'}`,\n        onClick: () => handleFrequencyClick('eventual'),\n        children: \"Eventuais\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(HistoryFinnanceCard, {\n        tagColor: item.tagColor,\n        title: item.description,\n        subtitle: item.dateFormatted,\n        amount: item.amountFormatted\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(List, \"QQNK/NwI5MDnPAsgUTMUU55dMT0=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["D:/Projects/Estudos/Typescript/My-Wallet/src/pages/List/index.tsx"],"names":["React","useMemo","useState","useEffect","uuid","Container","Content","Filters","ContentHeader","SelectInput","HistoryFinnanceCard","gains","expenses","formatCurrency","formatDate","listOfMonths","List","match","data","setData","monthSelected","setMonthSelected","Date","getMonth","yearSelected","setYearSelected","getFullYear","frequencyFilterSelected","setFrequencyFilterSelected","movimentType","params","type","pageData","title","lineColor","years","uniqueYears","forEach","item","date","year","includes","push","map","value","label","months","month","index","handleFrequencyClick","frequency","alreadySelected","findIndex","filtered","filter","prev","handleMonthSelected","parseMonth","Number","Error","handleYearSelected","parseYear","filteredDate","formattedData","id","description","amountFormatted","amount","dateFormatted","tagColor","length","e","target"],"mappings":"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","sourcesContent":["import React , {useMemo, useState, useEffect} from 'react';\r\nimport { uuid } from 'uuidv4';\r\nimport {Container, Content, Filters } from './styles';\r\nimport ContentHeader from '../../components/ContentHeader';\r\nimport SelectInput from '../../components/SelectInput';\r\nimport HistoryFinnanceCard from '../../components/HistoryFinnanceCard';\r\nimport gains from '../../repositories/gains';\r\nimport expenses from '../../repositories/expenses';\r\nimport formatCurrency from '../../utils/formatCurrency';\r\nimport formatDate from '../../utils/formatDate';\r\nimport listOfMonths from '../../utils/months';\r\n\r\ninterface IRouteParams {\r\n    match: {\r\n        params: {\r\n            type: string;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IData {\r\n    id: string;\r\n    description: string;\r\n    amountFormatted: string;\r\n    frequency: string;\r\n    dateFormatted: string;\r\n    tagColor: string;\r\n\r\n}\r\n\r\nconst List: React.FC<IRouteParams> = ({ match }) => {\r\n    const [data, setData] = useState<IData[]>([]);\r\n    const [monthSelected, setMonthSelected] = useState<number>(new Date().getMonth() + 1);\r\n    const [yearSelected, setYearSelected] = useState<number>(new Date().getFullYear());\r\n    const [frequencyFilterSelected, setFrequencyFilterSelected] = useState(['recorrente', 'eventual']);\r\n    const movimentType = match.params.type;\r\n\r\n    const pageData = useMemo(() => {\r\n        return movimentType === 'entry-balance' ?\r\n            {\r\n                title: 'Entradas',\r\n                lineColor: '#F7931B',\r\n                data: gains\r\n            }\r\n            :\r\n            {\r\n                title: 'SaÃ­das',\r\n                lineColor: '#E44C4E',\r\n                data: expenses\r\n            }\r\n    },[movimentType]);\r\n\r\n     const years = useMemo(() => {\r\n        let uniqueYears: number[] = [];\r\n        const { data } = pageData;\r\n        data.forEach(item => {\r\n             const date = new Date(item.date);\r\n             const year = date.getFullYear();\r\n             if(!uniqueYears.includes(year)){\r\n                 uniqueYears.push(year)\r\n             }\r\n         });\r\n         return uniqueYears.map(year => {\r\n             return {\r\n                 value: year,\r\n                 label: year,\r\n             }\r\n         });\r\n     },[pageData])\r\n\r\n     const months = useMemo(() => {\r\n        return listOfMonths.map((month, index) => {\r\n            return {\r\n                value: index + 1,\r\n                label: month,\r\n            }\r\n        });\r\n        },[]);\r\n\r\n        const handleFrequencyClick = (frequency: string) => {\r\n            const alreadySelected = frequencyFilterSelected.findIndex(item => item === frequency);\r\n            if(alreadySelected >= 0){\r\n                const filtered = frequencyFilterSelected.filter(item => item != frequency);\r\n                setFrequencyFilterSelected(filtered);\r\n            }else{\r\n                setFrequencyFilterSelected((prev) => [...prev, frequency]);\r\n            }    \r\n        }\r\n\r\n        const handleMonthSelected = (month: string) => {\r\n        try {\r\n            const parseMonth = Number(month);\r\n            setMonthSelected(parseMonth);\r\n        }\r\n        catch{\r\n            throw new Error('invalid month value. Is accept 0 - 24.')\r\n        }\r\n    }\r\n\r\n    const handleYearSelected = (year: string) => {\r\n        try {\r\n            const parseYear = Number(year);\r\n            setYearSelected(parseYear);\r\n        }\r\n        catch{\r\n            throw new Error('invalid year value. Is accept integer numbers.')\r\n        }\r\n    }\r\n\r\n    useEffect (() => {\r\n       const { data } = pageData;\r\n       const filteredDate = data.filter(item => {\r\n            const date = new Date(item.date);\r\n            const month = date.getMonth() + 1;\r\n            const year = date.getFullYear();\r\n            return month === monthSelected && year === yearSelected && frequencyFilterSelected.includes(item.frequency);\r\n       });\r\n       const formattedData = filteredDate.map(item => {\r\n            return {\r\n                id: uuid(),\r\n                description: item.description,\r\n                amountFormatted: formatCurrency(Number(item.amount)),\r\n                frequency: item.frequency,\r\n                dateFormatted: formatDate(item.date),\r\n                tagColor: item.frequency === 'recorrente' ? '#4E41F0' : '#E44C4E'\r\n            }\r\n        });\r\n        setData(formattedData)\r\n    },[pageData, monthSelected, yearSelected, data.length, frequencyFilterSelected]);\r\n\r\n    return (\r\n        <Container>\r\n            <ContentHeader title={pageData.title} lineColor={pageData.lineColor}>\r\n                <SelectInput  options={months} onChange={(e) => handleMonthSelected(e.target.value)} defaultValue={monthSelected}/>\r\n                <SelectInput  options={years} onChange={(e) => handleYearSelected(e.target.value)}defaultValue={yearSelected}/>\r\n            </ ContentHeader>\r\n\r\n            <Filters>\r\n                <button \r\n                    type=\"button\"\r\n                    className={`tag-filter tag-filter-recurrent\r\n                        ${frequencyFilterSelected.includes('recorrente') && 'tag-actived' }`}\r\n                    onClick={() => handleFrequencyClick('recorrente')}\r\n                >\r\n                    Recorrentes\r\n                </button>\r\n                <button \r\n                    type=\"button\"\r\n                    className={`tag-filter tag-filter-eventual\r\n                    ${frequencyFilterSelected.includes('eventual') && 'tag-actived' }`}\r\n                    onClick={() => handleFrequencyClick('eventual')}\r\n                >\r\n                    Eventuais\r\n                </button>\r\n            </Filters>\r\n\r\n            <Content>\r\n                {\r\n                    data.map(item => (\r\n            <HistoryFinnanceCard \r\n                    key={item.id}\r\n                    tagColor={item.tagColor}\r\n                    title={item.description}\r\n                    subtitle={item.dateFormatted}\r\n                    amount={item.amountFormatted}\r\n                />\r\n                    ))\r\n                }\r\n            </Content>\r\n        </Container>        \r\n    );\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}