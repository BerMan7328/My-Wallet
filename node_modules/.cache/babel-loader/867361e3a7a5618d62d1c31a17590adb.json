{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Estudos\\\\Typescript\\\\My-Wallet\\\\src\\\\hooks\\\\theme.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from 'react';\nimport dark from '../styles/themes/dark';\nimport light from '../styles/themes/light';\nconst ThemeContext = /*#__PURE__*/createContext({});\n\nconst ThemeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [theme, setTheme] = useState(() => {\n    const themeSaved = localStorage.getItem('@minha-carteira:theme');\n\n    if (themeSaved) {\n      return JSON.parse(themeSaved);\n    } else {\n      return dark;\n    }\n  });\n\n  const toggleTheme = () => {\n    if (theme.title === 'dark') {\n      setTheme(light);\n      localStorage.setItem('@minha-carteira:theme', JSON.stringify(light));\n    } else {\n      setTheme(dark);\n      localStorage.setItem('@minha-carteira:theme', JSON.stringify(dark));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      toggleTheme,\n      theme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n_s(ThemeProvider, \"G/dbcdMZM+j9XAHfl5BPrSI8wL4=\");\n\n_c = ThemeProvider;\n\nfunction useTheme() {\n  _s2();\n\n  const context = useContext(ThemeContext);\n  return context;\n}\n\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { ThemeProvider, useTheme };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["D:/Projects/Estudos/Typescript/My-Wallet/src/hooks/theme.tsx"],"names":["React","createContext","useState","useContext","dark","light","ThemeContext","ThemeProvider","children","theme","setTheme","themeSaved","localStorage","getItem","JSON","parse","toggleTheme","title","setItem","stringify","useTheme","context"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAyBA,MAAMC,YAAY,gBAAGL,aAAa,CAAgB,EAAhB,CAAlC;;AAEA,MAAMM,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,MAAM;AAC7C,UAAMS,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAnB;;AAEA,QAAGF,UAAH,EAAe;AACX,aAAOG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAP;AACH,KAFD,MAEK;AACD,aAAOP,IAAP;AACH;AACJ,GARiC,CAAlC;;AAUA,QAAMY,WAAW,GAAG,MAAM;AACtB,QAAGP,KAAK,CAACQ,KAAN,KAAgB,MAAnB,EAA0B;AACtBP,MAAAA,QAAQ,CAACL,KAAD,CAAR;AACAO,MAAAA,YAAY,CAACM,OAAb,CAAqB,uBAArB,EAA8CJ,IAAI,CAACK,SAAL,CAAed,KAAf,CAA9C;AACH,KAHD,MAGK;AACDK,MAAAA,QAAQ,CAACN,IAAD,CAAR;AACAQ,MAAAA,YAAY,CAACM,OAAb,CAAqB,uBAArB,EAA8CJ,IAAI,CAACK,SAAL,CAAef,IAAf,CAA9C;AACH;AACJ,GARD;;AAUA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEY,MAAAA,WAAF;AAAeP,MAAAA;AAAf,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CA1BD;;GAAMD,a;;KAAAA,a;;AA4BN,SAASa,QAAT,GAAmC;AAAA;;AAC/B,QAAMC,OAAO,GAAGlB,UAAU,CAACG,YAAD,CAA1B;AAEA,SAAOe,OAAP;AACH;;IAJQD,Q;;AAOT,SAASb,aAAT,EAAwBa,QAAxB","sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nimport dark from '../styles/themes/dark';\r\nimport light from '../styles/themes/light';\r\n\r\ninterface IThemeContext {\r\n    toggleTheme(): void;\r\n    theme: ITheme;\r\n}\r\n\r\ninterface ITheme {\r\n    title: string;\r\n\r\n    colors: {\r\n        primary: string;\r\n        secondary: string;\r\n        tertiary: string;\r\n\r\n        white: string;\r\n        black: string;\r\n        gray: string;\r\n\r\n        success: string;\r\n        info: string;\r\n        warning: string;\r\n    }\r\n}\r\n\r\nconst ThemeContext = createContext<IThemeContext>({} as IThemeContext);\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => {\r\n    const [theme, setTheme] = useState<ITheme>(() => {\r\n        const themeSaved = localStorage.getItem('@minha-carteira:theme');\r\n\r\n        if(themeSaved) {\r\n            return JSON.parse(themeSaved);\r\n        }else{\r\n            return dark;\r\n        }\r\n    });\r\n\r\n    const toggleTheme = () => {\r\n        if(theme.title === 'dark'){\r\n            setTheme(light);\r\n            localStorage.setItem('@minha-carteira:theme', JSON.stringify(light));\r\n        }else{\r\n            setTheme(dark);\r\n            localStorage.setItem('@minha-carteira:theme', JSON.stringify(dark));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ toggleTheme, theme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nfunction useTheme(): IThemeContext {\r\n    const context = useContext(ThemeContext);\r\n\r\n    return context;\r\n}\r\n\r\n\r\nexport { ThemeProvider, useTheme };\r\n"]},"metadata":{},"sourceType":"module"}